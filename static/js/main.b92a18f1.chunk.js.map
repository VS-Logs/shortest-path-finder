{"version":3,"sources":["box/Box.js","matrix/Matrix.js","App.js","serviceWorker.js","index.js"],"names":["Box","className","id","this","props","x","y","style","backgroundColor","color","onClick","onCellClick","React","Component","Matrix","state","rows","cols","setColors","evt","colors","i","j","push","setState","entry","exit","bfs","bfsSearchInProgress","initializeVisitsAndParents","visited","parents","queue","entryX","split","entryY","exitX","exitY","stop","delay","length","loopQueue","k","value","shift","colorQueue","setTimeout","forEach","box","pathDelay","m","n","changeBoxColor","placement","clearCell","placeWall","placeEntry","placeExit","randomMazeGenerator","a","b","Math","floor","random","onRowRangeChange","event","window","innerHeight","target","undefined","onColRangeChange","innerWidth","template","division","key","type","visitedCol","parent","htmlFor","name","min","max","defaultValue","onChange","generateGrid","Button","variant","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b92a18f1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Box.css\";\r\n\r\nclass Box extends React.Component {\r\n  render() {\r\n    return <div className=\"box\" id={\"box\" + this.props.x + this.props.y} style={{ backgroundColor: this.props.color }} onClick={()=>this.props.onCellClick(this.props.x, this.props.y)}></div>;\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import React from \"react\";\r\nimport \"./Matrix.css\";\r\nimport Box from \"../box/Box\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nclass Matrix extends React.Component {\r\n  state = {\r\n    color: [],\r\n    rows: 6,\r\n    cols: 6,\r\n  };\r\n\r\n  generateGrid() {\r\n    var template = [];\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      let division = [];\r\n      for (let j = 0; j < this.state.cols; j++)\r\n        division.push(\r\n          <Box\r\n            key={i + \"-\" + j}\r\n            x={i}\r\n            y={j}\r\n            color={this.state.color[i] && this.state.color[i][j]}\r\n            type=\"\"\r\n            onCellClick={this.onCellClick}\r\n          ></Box>\r\n        );\r\n      template.push(<div key={\"row\" + i}>{division}</div>);\r\n    }\r\n    return template;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setColors();\r\n  }\r\n\r\n  setColors = (evt, rows = this.state.rows, cols = this.state.cols) => {\r\n    var colors = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let color = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        color.push(\"\");\r\n      }\r\n      colors.push(color);\r\n    }\r\n\r\n    this.setState({\r\n      color: colors,\r\n    });\r\n\r\n    this.entry = \"\";\r\n    this.exit = \"\";\r\n  };\r\n\r\n  initializeVisitsAndParents() {\r\n    var visited = [];\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      let visitedCol = [];\r\n      for (let j = 0; j < this.state.rows; j++) {\r\n        visitedCol.push(false);\r\n      }\r\n      visited.push(visitedCol);\r\n    }\r\n\r\n    var parents = [];\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      let parent = [];\r\n      for (let j = 0; j < this.state.rows; j++) {\r\n        parent.push(-1);\r\n      }\r\n      parents.push(parent);\r\n    }\r\n\r\n    return [visited, parents];\r\n  }\r\n\r\n  bfs = () => {\r\n    if (!this.entry || !this.exit) return;\r\n    this.bfsSearchInProgress = true;\r\n    var [visited, parents] = this.initializeVisitsAndParents();\r\n    var queue = [];\r\n\r\n    var entryX = +this.entry?.split(\"-\")[0];\r\n    var entryY = +this.entry?.split(\"-\")[1];\r\n\r\n    queue.push(entryX + \"-\" + entryY);\r\n    visited[entryX][entryY] = true;\r\n\r\n    var exitX = +this.exit?.split(\"-\")[0];\r\n    var exitY = +this.exit?.split(\"-\")[1];\r\n\r\n    var stop = false;\r\n    var delay = 0;\r\n    while (queue.length && !stop) {\r\n      var length = queue.length;\r\n\r\n      var loopQueue = [];\r\n      for (let k = 0; k < length; k++) {\r\n        let value = queue.shift();\r\n\r\n        let i = +value.split(\"-\")[0];\r\n        let j = +value.split(\"-\")[1];\r\n\r\n        if (i === exitX && j === exitY) {\r\n          stop = true;\r\n          break;\r\n        }\r\n\r\n        if (i + 1 < this.state.rows && !visited[i + 1][j] && this.state.color[i + 1][j] !== \"#c00\") {\r\n          queue.push(i + 1 + \"-\" + j);\r\n          parents[i + 1][j] = i + \"-\" + j;\r\n          visited[i + 1][j] = true;\r\n        }\r\n        if (i - 1 > -1 && !visited[i - 1][j] && this.state.color[i - 1][j] !== \"#c00\") {\r\n          queue.push(i - 1 + \"-\" + j);\r\n          parents[i - 1][j] = i + \"-\" + j;\r\n          visited[i - 1][j] = true;\r\n        }\r\n        if (j + 1 < this.state.cols && !visited[i][j + 1] && this.state.color[i][j + 1] !== \"#c00\") {\r\n          queue.push(i + \"-\" + (j + 1));\r\n          parents[i][j + 1] = i + \"-\" + j;\r\n          visited[i][j + 1] = true;\r\n        }\r\n        if (j - 1 > -1 && !visited[i][j - 1] && this.state.color[i][j - 1] !== \"#c00\") {\r\n          queue.push(i + \"-\" + (j - 1));\r\n          parents[i][j - 1] = i + \"-\" + j;\r\n          visited[i][j - 1] = true;\r\n        }\r\n\r\n        loopQueue.push(i + \"-\" + j);\r\n      }\r\n\r\n      let colorQueue = [...loopQueue];\r\n      setTimeout(() => {\r\n        let colors = this.state.color;\r\n        colorQueue.forEach((box) => {\r\n          if (!(+box.split(\"-\")[0] === entryX && +box.split(\"-\")[1] === entryY))\r\n            colors[+box.split(\"-\")[0]][+box.split(\"-\")[1]] = \"darkgray\";\r\n        });\r\n\r\n        this.setState({\r\n          color: colors,\r\n        });\r\n      }, 200 * delay);\r\n\r\n      delay++;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      if (stop) {\r\n        let x = exitX,\r\n          y = exitY;\r\n        let pathDelay = 0;\r\n        [x, y] = [+parents[x][y].split(\"-\")[0], +parents[x][y].split(\"-\")[1]];\r\n        if(entryX === x && entryY === y)\r\n          return;\r\n        do {\r\n          let m = x,\r\n            n = y;\r\n          setTimeout(() => {\r\n            this.changeBoxColor(m, n, \"yellow\");\r\n          }, pathDelay++ * 100);\r\n          [x, y] = [+parents[x][y].split(\"-\")[0], +parents[x][y].split(\"-\")[1]];\r\n        } while (entryX !== x || entryY !== y);\r\n      }\r\n    }, 200 * delay);\r\n  };\r\n\r\n  onCellClick = (x, y) => {\r\n    if (this.placement === \"\") return;\r\n\r\n    if (this.placement === \"wall\") this.changeBoxColor(x, y, \"#c00\");\r\n    if (this.placement === \"entry\") {\r\n      if (this.entry) this.changeBoxColor(+this.entry.split(\"-\")[0], +this.entry.split(\"-\")[1]);\r\n      this.entry = x + \"-\" + y;\r\n      this.changeBoxColor(x, y, \"blue\");\r\n    }\r\n    if (this.placement === \"exit\") {\r\n      if (this.exit) this.changeBoxColor(this.exit.split(\"-\")[0], this.exit.split(\"-\")[1]);\r\n      this.changeBoxColor(x, y, \"green\");\r\n      this.exit = x + \"-\" + y;\r\n    }\r\n    if (this.placement === \"cell\") this.changeBoxColor(x, y);\r\n  };\r\n\r\n  clearCell = () => {\r\n    this.placement = \"cell\";\r\n  };\r\n\r\n  placeWall = () => {\r\n    this.placement = \"wall\";\r\n  };\r\n\r\n  placeEntry = () => {\r\n    this.placement = \"entry\";\r\n  };\r\n\r\n  placeExit = () => {\r\n    this.placement = \"exit\";\r\n  };\r\n\r\n  changeBoxColor = (i, j, color = \"white\") => {\r\n    var colors = [...this.state.color];\r\n    colors[i][j] = color;\r\n    this.setState(() => ({\r\n      color: colors,\r\n    }));\r\n  };\r\n\r\n  randomMazeGenerator = () => {\r\n    var colors = [];\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      let color = [];\r\n      for (let j = 0; j < this.state.cols; j++) {\r\n        color.push(\"\");\r\n      }\r\n      colors.push(color);\r\n    }\r\n\r\n    var x, y;\r\n    x = Math.floor(Math.random() * this.state.rows);\r\n    y = Math.floor(Math.random() * this.state.cols);\r\n    colors[x][y] = \"blue\";\r\n\r\n    var a, b;\r\n    do {\r\n      a = Math.floor(Math.random() * this.state.rows);\r\n      b = Math.floor(Math.random() * this.state.cols);\r\n    } while (a === x && y === b);\r\n    colors[a][b] = \"green\";\r\n\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      for (let j = 0; j < this.state.cols; j++) {\r\n        if (colors[i][j] === \"\") {\r\n          if (Math.floor(Math.random() * 10) < 3) {\r\n            colors[i][j] = \"#c00\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.entry = x + \"-\" + y;\r\n    this.exit = a + \"-\" + b;\r\n\r\n    this.setState({\r\n      color: colors,\r\n    });\r\n  };\r\n\r\n  onRowRangeChange = (event) => {\r\n    var height = window.innerHeight;\r\n\r\n    if (height - 300 > 26 * event.target.value) {\r\n      this.setState({\r\n        rows: event.target.value,\r\n      });\r\n      this.setColors(undefined, event.target.value);\r\n    }\r\n  };\r\n\r\n  onColRangeChange = (event) => {\r\n    var width = window.innerWidth;\r\n    if (width > 28 * event.target.value) {\r\n      this.setState({\r\n        cols: event.target.value,\r\n      });\r\n      this.setColors(undefined, undefined, event.target.value);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"grid\">\r\n          <label htmlFor=\"vol\">Rows (between 6 and 30):</label>\r\n          <input type=\"range\" id=\"rows\" name=\"vol\" min=\"5\" max=\"30\" defaultValue=\"6\" onChange={this.onRowRangeChange} />\r\n          <br />\r\n          <label htmlFor=\"vol\">Columns (between 6 and 60):</label>\r\n          <input type=\"range\" id=\"cols\" name=\"vol\" min=\"5\" max=\"60\" defaultValue=\"6\" onChange={this.onColRangeChange} />\r\n          <br />\r\n          <br />\r\n          {this.generateGrid()}\r\n          <Button className=\"margin-around-5px\" variant=\"contained\" color=\"primary\" onClick={this.bfs}>\r\n            Start BFS\r\n          </Button>\r\n          <br />\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.randomMazeGenerator}>\r\n            Generate Random Maze\r\n          </Button>\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.setColors}>\r\n            Reset\r\n          </Button>\r\n          <br />\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.placeEntry}>\r\n            Place Entry\r\n          </Button>\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.placeExit}>\r\n            Place Exit\r\n          </Button>\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.placeWall}>\r\n            Place Wall\r\n          </Button>\r\n          <Button className=\"margin-around-5px\" variant=\"outlined\" color=\"primary\" onClick={this.clearCell}>\r\n            Clear Cell\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Matrix;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Matrix from './matrix/Matrix'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Shortest Path Finder</h2>\r\n      <Matrix></Matrix>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}